// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount,
  sender,
  recipient
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, from_account_id, to_account_id, sender, recipient, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64   `json:"from_account_id"`
	ToAccountID   int64   `json:"to_account_id"`
	Amount        float64 `json:"amount"`
	Sender        string  `json:"sender"`
	Recipient     string  `json:"recipient"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Sender,
		arg.Recipient,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Sender,
		&i.Recipient,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, sender, recipient, amount, created_at FROM transfers
WHERE id = $1
AND (sender = $2
OR recipient = $2)
LIMIT 1
`

type GetTransferParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetTransfer(ctx context.Context, arg GetTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfer, arg.ID, arg.Username)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Sender,
		&i.Recipient,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_id, to_account_id, sender, recipient, amount, created_at FROM transfers
WHERE id > $1
AND sender = $2
ORDER BY id
LIMIT $3
`

type ListTransfersParams struct {
	ID     int64  `json:"id"`
	Sender string `json:"sender"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfers, arg.ID, arg.Sender, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Sender,
			&i.Recipient,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByFromAccount = `-- name: ListTransfersByFromAccount :many
SELECT id, from_account_id, to_account_id, sender, recipient, amount, created_at FROM transfers
WHERE from_account_id = $1
AND id > $2
AND sender = $3
ORDER BY id
LIMIT $4
`

type ListTransfersByFromAccountParams struct {
	FromAccountID int64  `json:"from_account_id"`
	ID            int64  `json:"id"`
	Sender        string `json:"sender"`
	Limit         int32  `json:"limit"`
}

func (q *Queries) ListTransfersByFromAccount(ctx context.Context, arg ListTransfersByFromAccountParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersByFromAccount,
		arg.FromAccountID,
		arg.ID,
		arg.Sender,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Sender,
			&i.Recipient,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByFromAndToAccount = `-- name: ListTransfersByFromAndToAccount :many
SELECT id, from_account_id, to_account_id, sender, recipient, amount, created_at FROM transfers
WHERE from_account_id = $1
AND to_account_id = $2
AND id > $3
AND sender = $4
ORDER BY id
LIMIT $5
`

type ListTransfersByFromAndToAccountParams struct {
	FromAccountID int64  `json:"from_account_id"`
	ToAccountID   int64  `json:"to_account_id"`
	ID            int64  `json:"id"`
	Sender        string `json:"sender"`
	Limit         int32  `json:"limit"`
}

func (q *Queries) ListTransfersByFromAndToAccount(ctx context.Context, arg ListTransfersByFromAndToAccountParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersByFromAndToAccount,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.ID,
		arg.Sender,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Sender,
			&i.Recipient,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByToAccount = `-- name: ListTransfersByToAccount :many
SELECT id, from_account_id, to_account_id, sender, recipient, amount, created_at FROM transfers
WHERE to_account_id = $1
AND id > $2
AND sender = $3
ORDER BY id
LIMIT $4
`

type ListTransfersByToAccountParams struct {
	ToAccountID int64  `json:"to_account_id"`
	ID          int64  `json:"id"`
	Sender      string `json:"sender"`
	Limit       int32  `json:"limit"`
}

func (q *Queries) ListTransfersByToAccount(ctx context.Context, arg ListTransfersByToAccountParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersByToAccount,
		arg.ToAccountID,
		arg.ID,
		arg.Sender,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Sender,
			&i.Recipient,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
